class Friend():
    def __init__(self, name):
        self.name = name
        self.money = 0


class Expenses():
    def __init__(self, value, payer, owers, shares):
        self.value = value
        self.payer = payer
        self.owers = owers
        self.shares = shares


class Group():
    def __init__(self, graph):
        self.expenses = []
        self.friends = []
        self.graph = graph              #graph should be a Group object

    def add_friend(self, new_friend):
        self.graph.add_node(new_friend)
        self.friends.append(new_friend)

    def add_expense(self, expense):
        self.expenses.append(expense)
        self.update_pay(expense)

    def update_pay(self, expense):
        total_shares = sum(expense.shares)
        amount_for_one = [expense.value * expense.shares[i] / total_shares for i in range(len(expense.owers))]
        for person in expense.owers:
            if person != expense.payer:
                self.graph.add_edge(expense.payer, person, amount_for_one[person])
                self.friends[person].money -= amount_for_one[person]
                self.friends[expense.payer].money += amount_for_one[person]

class Graph:
    def __init__(self):
        self.graph = {}

    def add_node(self, node):
        if node not in self.graph:
            self.graph[node] = {}

    def add_edge(self, payer, ower, money):
        if payer not in self.graph:
            self.add_node(payer)
        if ower not in self.graph:
            self.add_node(ower)
        self.graph[payer][ower] = money


def detect_cycle_util(graph, node, visited, path_stack):
    visited[node] = True
    path_stack[node] = True
    for child in graph[node]:
        if not visited[child]:
            if detect_cycle_util(graph, child, visited, path_stack):
                return True
        elif path_stack[child]: # YEEEEES
            return True
    path_stack[node] = False # backtrack :(
    return False


def detect_cycle(graph, n):
    visited = [False] * (n + 1)
    path_stack = [False] * (n + 1)
    for node in range(1, n + 1):
        if not visited[node]:
            if detect_cycle_util(graph, node, visited, path_stack):
                return True
    return False
