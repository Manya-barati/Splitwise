graph= {'A':{'B':500} , 'B':{'C':300}, 'C':{'D':200}, 'D':{'A':100}, 'C':{'A':50}, 'E':{'F':400}, 'F':{'E':300}}

class delete_cycle:
    def __init__(self, graph):
        self.graph= graph

    def dfs_util(self, node, visited):

        if visited[node] == 1: #node is being visited, cycle detected
            return True
        if visited[node] == 2: #node has already been explored
            return False
        
        visited[node] = 1

        for child in self.graph[node].keys():
            if self.dfs_util(child, visited):
                return True
            
        visited[node] = 2 
        return False

    def detect_cycle(self):
        visited={key:0 for key in self.graph.keys()}  #0 = not visited, 1= visiting, 2= fully visited

        for node in self.graph.keys():
            if visited[node] == 0:
                if self.dfs_util(node, visited):
                    return True
        return False
    
    def answer(self):
        if self.detect_cycle():
            print('yes')

s= delete_cycle(graph)
s.answer()