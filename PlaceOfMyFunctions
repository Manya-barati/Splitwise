import numpy as np
import heapq as hq


class Friend():
    def __init__(self, name):
        self.name = name
        self.money = 0


class Expenses():

    # categories = house, food, shopping, transportation, hobby, trip, medicine, education, gifts, business, pets, charity
    # payment methods = online -> show شماره کارت or لینک پرداخت از آپ, cash
    def __init__(self, value, payer, owers, shares = None, group_name, category, payment_method):
        self.value = value
        self.payer = payer
        self.owers = owers
        self.shares = shares
        self.group_name = group_name
        self.category = category
        self.payment_method = payment_method

    def calculate_shares(self, split_type = 'equal'):
        if split_type == 'equal':
            self.shares = [1] * (len(self.owers) + 1)

    # 6. add a function to give all expenses in a category

    # 7. total by group

    # 8. total by person

    # 9. total by category

    # 10. search by user

    # 11. search by date? (first read about it!)


class Group():
    def __init__(self):
        self.expenses = []
        self.friends = []
        self.groups = {} #key : gr name, value : category

    def add_friend(self, new_friend):
        self.friends.append(new_friend)

    def add_expense(self, expense):
        self.expenses.append(expense)
        if expense.group_name not in self.groups:
            self.groups[expense.group_name] = expense.category
        self.update_pay(expense)

    def update_pay(self, expense):
        total_shares = sum(expense.shares)
        amount_for_one = [expense.value * expense.shares[i] / total_shares for i in range(len(expense.owers))]
        for i, person in enumerate(expense.owers):
            if person != expense.payer:
                self.friends[person].money -= amount_for_one[i]
                self.friends[expense.payer].money += amount_for_one[i]

    # 1. add a function to give all groups in a list or dic

    # 2. add a function to give all expenses in a group

    # 3. add a function to give all expenses in a category

    # 4. add a function to give total money in a group

    # 5. add a function to give total money in a category



transactions = [['a', 'b', 50], ['b', 'c', 30], ['c', 'a', 20], ['d', 'a', 10]]
transactions_2 = [['a', 'b', 1000], ['a', 'c', 2000], ['b', 'c', 5000]]
transactions_3 = [[0, 0, 2], [0, 1, 63], [0, 3, 85], [0, 4, 49], [1, 1, 76], [1, 4, 27], [2, 3, 17], [3, 0, 73],
                  [3, 1, 32], [3, 2, 50], [3, 3, 6], [3, 4, 71], [4, 1, 86], [4, 4, 10]]


def convert_to_graph(transactions):
    transaction_dict = {}
    for giver, reciever, a in transactions:
        if giver not in transaction_dict.keys():
            transaction_dict[giver] = len(transaction_dict)
        if reciever not in transaction_dict.keys():
            transaction_dict[reciever] = len(transaction_dict)

    n = len(transaction_dict)
    # graph[i,j] indicates the amount that person i needs to pay to person j
    graph = np.zeros((n, n))
    for giver, reciever, amount in transactions:
        graph[transaction_dict[giver], transaction_dict[reciever]] = amount

    return transaction_dict, graph


transaction_dict, graph = convert_to_graph(transactions_3)
reverse_dict = {i: j for j, i in transaction_dict.items()}

print(graph)


class greedy_debt_simplification:

    def __init__(self):
        self.givers = []
        self.recievers = []
        self.n = len(graph)
        self.amounts = [0 for _ in range(self.n)]

    # for each user, calculate the amount he/she ows or has to pay
    def calculate_amount(self, graph):
        for i in range(self.n):
            gain = np.sum(graph[:, i])
            give = np.sum(graph[i, :], axis=0)
            self.amounts[i] = int(gain - give)

    # construct 2 heap structures, one for the givers and one for the recievers
    def constructQ(self):
        for i, amount in enumerate(self.amounts):
            if amount > 0:
                hq.heappush(self.recievers, (-amount, i))
            elif amount < 0:
                hq.heappush(self.givers, (amount, i))

    def simplify_debts(self):
        answer = []
        while self.givers and self.recievers:

            # pop the largest values for givers and recievers, and try to match them together
            giver_amount, giver_id = hq.heappop(self.givers)
            reciever_amount, reciever_id = hq.heappop(self.recievers)

            transaction_val = min(-giver_amount, -reciever_amount)

            # record the transaction made
            answer.append([reverse_dict[giver_id], reverse_dict[reciever_id], transaction_val])

            giver_amount += transaction_val
            reciever_amount += transaction_val

            # update the heaps
            if giver_amount < 0:
                hq.heappush(self.givers, (giver_amount, giver_id))

            if reciever_amount < 0:
                hq.heappush(self.recievers, (reciever_amount, reciever_id))

        return answer

    def answer(self):
        self.calculate_amount(graph)
        self.constructQ()
        answer = self.simplify_debts()
        print(self.amounts)
        print(answer)


s = greedy_debt_simplification()
s.answer()
